// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© adolgov

// @description
//-------------------------------------------------
// activateTrailingOnThirdStep == false (default)
//  - when tp1 is reached, sl is moved to break-even
//  - when tp2 is reached, sl is moved to tp1
//  - when tp3 is reached - exit
//-------------------------------------------------
// activateTrailingOnThirdStep == true
//  - when tp1 is reached, sl is moved to break-even
//  - when tp2 is reached, sl is moved to tp1 and trailing stop is activated with tp2 amount level and tp1 offset level
//-------------------------------------------------

//@version=4
strategy(title="Stepped Trailing Strategy",initial_capital=1000,
     currency=currency.USD, default_qty_type=strategy.cash,
     default_qty_value=1000, commission_type=strategy.commission.cash_per_order, 
     commission_value=1.0, pyramiding=1, overlay=true, calc_on_every_tick=true, backtest_fill_limits_assumption=2)


// The starting date of trading
startMonth = input(title="Start Month", type=input.integer, defval=1)
startYear = input(title="Start Year", type=input.integer, defval=2021)

// STEP 1:
// Configure moving average with input options
priceData = input(title="Price Data", type=input.source, defval=close)
maLength  = input(title="Moving Average Length", type=input.integer, defval=9, minval=2)

// STEP 2:
// Calculate the moving average
maValue = ema(priceData, maLength)

// Trading conditions for this example strategy
floatPosition = (strategy.position_size == 0)
longPosition = (strategy.position_size > 0)
greenCandle = close > open
isUptrend = maValue > maValue[1] and maValue[1] > maValue[2]

buySignal = floatPosition and (close > maValue) and isUptrend and greenCandle


// =========== Buy / Sell
if (month >= startMonth and year == startYear) or year > startYear
    strategy.entry(id="x", long=true, when=buySignal)

percent2points(percent) =>
    strategy.position_avg_price * percent / 100 / syminfo.mintick

// sl & tp in %%
sl = percent2points(input(5, title = "stop loss %%"))
tp1 = percent2points(input(5, title = "take profit 1 %%"))
tp2 = percent2points(input(10, title = "take profit 2 %%"))
tp3 = percent2points(input(15, title = "take profit 3 %%"))
activateTrailingOnThirdStep = input(false, title = "activate trailing on third stage (tp3 is amount, tp2 is offset level)")

curProfitInPts() =>
    if strategy.position_size > 0
        (high - strategy.position_avg_price) / syminfo.mintick
    else if strategy.position_size < 0
        (strategy.position_avg_price - low) / syminfo.mintick
    else
        0
        
calcStopLossPrice(OffsetPts) =>
    if strategy.position_size > 0
        strategy.position_avg_price - OffsetPts * syminfo.mintick
    else if strategy.position_size < 0
        strategy.position_avg_price + OffsetPts * syminfo.mintick
    else
        na
        
calcProfitTrgtPrice(OffsetPts) =>
    calcStopLossPrice(-OffsetPts)

getCurrentStage() =>
    var stage = 0
    if strategy.position_size == 0 
        stage := 0
    if stage == 0 and strategy.position_size != 0
        stage := 1
    else if stage == 1 and curProfitInPts() >= tp1
        stage := 2
    else if stage == 2 and curProfitInPts() >= tp2
        stage := 3
    stage

calcTrailingAmountLevel(points) =>
    var float level = na
    level := calcProfitTrgtPrice(points)
    if not na(level)
        if strategy.position_size > 0
            if not na(level[1])
                level := max(level[1], level)
            if not na(level)
                level := max(high, level)
        else if strategy.position_size < 0
            if not na(level[1])
                level := min(level[1], level)
            if not na(level)
                level := min(low, level)

calcTrailingOffsetLevel(points, offset) =>
    float result = na
    amountLevel = calcTrailingAmountLevel(points)
    if strategy.position_size > 0
        trailActiveDiff = amountLevel - calcProfitTrgtPrice(points)
        if trailActiveDiff > 0
            result := trailActiveDiff + calcProfitTrgtPrice(offset)
    else if strategy.position_size < 0
        trailActiveDiff = calcProfitTrgtPrice(points) - amountLevel
        if trailActiveDiff > 0
            result := calcProfitTrgtPrice(offset) - trailActiveDiff
    result

float stopLevel = na
float trailOffsetLevel = na
float profitLevel = activateTrailingOnThirdStep ? calcTrailingAmountLevel(tp3) : calcProfitTrgtPrice(tp3)

// note: calcTrailingOffsetLevel uses calcTrailingAmountLevel and last one has a state (level).
//       therefor we needs calculate it on every bar for correct result.
//       if we inline it the Pine compiler give us warning "The function '***' should be called on each calculation for consistency. It is recommended to extract the call from this scope."
trailOffsetLevelTmp = calcTrailingOffsetLevel(tp3, tp2)

// based on current stage set up exit
// note: we use same exit ids ("x") consciously, for MODIFY the exit's parameters
curStage = getCurrentStage()
if curStage == 1
    stopLevel := calcStopLossPrice(sl)
    strategy.exit(id="x", loss = sl, profit = tp3, comment = "sl or tp3")
else if curStage == 2
    stopLevel := calcStopLossPrice(0)
    strategy.exit(id="x", stop = stopLevel, profit = tp3, comment = "breakeven or tp3")
else if curStage == 3
    stopLevel := calcStopLossPrice(-tp1)
    if activateTrailingOnThirdStep
        trailOffsetLevel := trailOffsetLevelTmp
        strategy.exit(id="x", stop = stopLevel, trail_points = tp3, trail_offset = tp3-tp2, comment = "stop tp1 or trailing tp3 with offset tp2")
    else
        strategy.exit(id="x", stop = stopLevel, profit = tp3, comment = "tp1 or tp3")
else 
    strategy.close(id="x", when=close < close[strategy.position_size])
    
