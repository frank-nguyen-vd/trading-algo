//@version=4
//Created by Yasin Basaran for educational purposes , you can use it freely and i appreciate if someone make a strategy out of it :)
// Trade wise and be careful.
study(title="Oracle Algo-V1.3", shorttitle="Oracle Algo-V1.3", overlay=true, max_labels_count=500)
max_bars_back(time, 1000)

//////////////////DYNAMIC STOP LOSS AND TAKE PROFIT SECTION ACORDING TO SITUATION/////////
my_var9 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ Risk and Reward Section Settings ðŸ’¶ðŸ’¶ðŸ’¶")
TP1 = input(2, "Take Profit-1 %", minval=1)
TP2 = input(4, "Take Profit-2-%", minval=1)
TP3 = input(6, "Take Profit-3-%", minval=1)

////////////////////////DYNAMIC SUPPORT AND RESISTANCE////////////

my_var = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ Dynamic Support and Resistance Settings ðŸ’¶ðŸ’¶ðŸ’¶")

length = input(20, minval=1, title="Dynamic Support and Resistance Range ")
lower = lowest(length)
upper = highest(length)
upperText = tostring(upper,"###,###.####")+(change(upper)>0?" â–² ":" â–¼ ")
lowerText = tostring(lower,"###,###.####")+(change(lower)>0?" â–² ":" â–¼ ")
line.new(0, upper, 0, upper, xloc=xloc.bar_time, extend=extend.right, color=color.black, style=line.style_solid, width=1)
line.new(0, lower, 0, lower, xloc=xloc.bar_time, extend=extend.right, color=color.red, style=line.style_solid, width=1)

///////////////BOLLINGER/////
my_var2 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ Bollinger Band Settings ðŸ’¶ðŸ’¶ðŸ’¶")

lengthBB = input(20, minval=1)
//srcBB = input(close, title="Source")
//multBB = input(2.0, minval=0.001, maxval=50, title="StdDevBB")
basisBB = sma(close, lengthBB)
devBB = stdev(close, lengthBB) *2
upperBB = basisBB + devBB
lowerBB = basisBB - devBB
//offset = input(0, "Offset", type = input.integer, minval = -500, maxval = 500)
plot(basisBB, "Basis-BB", color=color.black,  linewidth=2 ,transp=100)
p1 = plot(upperBB, "Upper-BB", color=color.black,  linewidth=2, transp=50)
p2 = plot(lowerBB, "Lower-BB", color=color.black,  linewidth=2, transp=50)
fill(p1, p2, title = "Background-BB", color=color.blue, transp=95)

/////////////////EMA/////////
my_var3 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ EMA Settings ðŸ’¶ðŸ’¶ðŸ’¶")

lenemin = input(50, minval=1, title="MA Fast")
outE1 = ema(close, lenemin)
E1X = plot(outE1, color=color.green, title="MA Fast", linewidth=4, transp=50)

lenemax = input(200, minval=1, title="MA Slow")
outE2 = ema(close, lenemax)
E2X = plot(outE2, color=color.red, title="MA Slow", linewidth=4, transp=50)
emarat = ( outE1 / outE2 ) - 1
emaratText=tostring(emarat,"%.##")+(change(emarat)>0?" â–² ":" â–¼ ")

fill(E1X, E2X, title="Background-EMA", color=color.red,transp=90 )

//////////////CCI//////////////
my_var4 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ Commodity Chanel Index Settings ðŸ’¶ðŸ’¶ðŸ’¶")

lengthCCI = input(20, minval=1)
maCCI = sma(close, lengthCCI)
cci = (close - maCCI) / (0.015 * dev(close, lengthCCI))
cciText=tostring(cci,"#.##")+(change(cci)>0?" â–² ":" â–¼ ")

///////////////MACD///////////////////
my_var5 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ MACD Settings ðŸ’¶ðŸ’¶ðŸ’¶")

fast_length = input(title="MACD Fast Length", type=input.integer, defval=5)
slow_length = input(title="MACD Slow Length", type=input.integer, defval=45)
//srcxxx = input(title="MACD Source", type=input.source, defval=close)
signal_length = input(title="MACD Signal Smoothing", type=input.integer, minval = 1, maxval = 50, defval = 5)
sma_source = input(title="MACD Simple MA(Oscillator)", type=input.bool, defval=false)
sma_signal = input(title="MACD Simple MA(Signal Line)", type=input.bool, defval=false)
fast_ma = sma_source ? sma(close, fast_length) : ema(close, fast_length)
slow_ma = sma_source ? sma(close, slow_length) : ema(close, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal ? sma(macd, signal_length) : ema(macd, signal_length)
hist = macd - signal
macdText=tostring(hist,"#.####")+(change(hist)>0?" â–² ":" â–¼ ")

/////////////DIRECTIONAL MOVEMENT INDEX////////////////
my_var6 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ ADX and DI Settings ðŸ’¶ðŸ’¶ðŸ’¶")

lensig = input(14, title="ADX Smoothing", minval=1, maxval=50)
lendi = input(14, minval=1, title="DI Length")
updi = change(high)
downdi = -change(low)
plusDM = na(updi) ? na : (updi > downdi and updi > 0 ? updi : 0)
minusDM = na(downdi) ? na : (downdi > updi and downdi > 0 ? downdi : 0)
trur = rma(tr, lendi)
plus = fixnan(100 * rma(plusDM, lendi) / trur)
minus = fixnan(100 * rma(minusDM, lendi) / trur)
sum = plus + minus
plusText=tostring(plus,"#.####")+(change(plus)>0?" â–² ":" â–¼ ")
minusText=tostring(minus,"#.####")+(change(minus)>0?" â–² ":" â–¼ ")

///////STOCH RSI///////////
my_var7 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ Stoch and RSI Settings ðŸ’¶ðŸ’¶ðŸ’¶")

smoothK = input(3, "K", minval=1)
smoothD = input(3, "D", minval=1)
lengthRSI = input(14, "RSI Length", minval=1)
lengthStoch = input(14, "Stochastic Length", minval=1)
srcstoch = input(close, title="RSI Source")
rsi1 = rsi(srcstoch, lengthRSI)
k = sma(stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK)
d = sma(k, smoothD)
StochKText=tostring(k,"#.##")+(change(k)>0?" â–² ":" â–¼ ")
StochDText=tostring(d,"#.##")+(change(d)>0?" â–² ":" â–¼ ")
rsiText=tostring(rsi1,"#.##")+(change(rsi1)>0?" â–² ":" â–¼ ")

/////////////////WAVE TREND/////////////////
my_var8 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ Wave Trend Settings ðŸ’¶ðŸ’¶ðŸ’¶")
n1 = input(10, "WT-Channel Length")
n2 = input(21, "Average Length")
ap = hlc3 
esa = ema(ap, n1)
dw = ema(abs(ap - esa), n1)
ci = (ap - esa) / (0.015 * dw)
tci = ema(ci, n2)
wt1 = tci
wt2 = sma(wt1,4)
wtratText=tostring(wt1,"#.##")+(change(wt1)>0?" â–² ":" â–¼ ")

/////////////////SUPER TREND/////////////////
[supertrend, direction] = supertrend(3, 10)
upTrend = direction < 0 ? supertrend : na
downTrend = direction < 0? na : supertrend
superText = iff(upTrend >0 , "Up Trend", "Down Trend")

/////////////////BULL & BEAR INDEX/////////////////
BullPower = high - ema(close, 20)
BearPower = low - ema(close, 20)
bbindex = ((BullPower + BearPower) /2 )
bbindexText = iff(bbindex >0 , "BULL","BEAR")

/////////////// BUYING VOLUME AND SELLING VOLUME PRESSSURE////////
buyvolume = ema(iff( (high==low), 0, volume*(close-low)/(high-low)),15)
sellvolume = ema(iff( (high==low), 0, volume*(high-close)/(high-low)),15)
totalvolume = buyvolume + sellvolume
buypressure = (buyvolume / totalvolume )*100
sellpressure = (sellvolume / totalvolume)*100
buysellpressureText = iff( buypressure>sellpressure , "BUY", "SELL")


//////////////PIVOT POINTS/////////////
ph2 = pivothigh(2, 2)
pl2 = pivotlow(2, 2)
plot(ph2, title="High Pivot",style=plot.style_cross, linewidth=3, color= color.green)
plot(pl2, title="Low Pivot", style=plot.style_cross, linewidth=3, color= color.red)

//DEFINE STRATEGY
currPrice = hl2[0]
prevPrice = hl2[1]

buy = currPrice > prevPrice and emarat>0 and currPrice >outE1 and currPrice >outE2 and currPrice >basisBB and cci > 0 and macd >0 and plus > minus and k>d and wt1>wt2
sell = currPrice < prevPrice and emarat<0 and currPrice <outE1 and currPrice <outE2 and currPrice <basisBB and cci < 0 and macd <0 and plus < minus and k<d and wt1<wt2
neutral = buy == 0 and sell == 0


//////////////////DYNAMIC STOP LOSS AND TAKE PROFIT SECTION CALCULATIONS/////////

bvalx = valuewhen(currPrice > prevPrice and emarat>0 and currPrice >outE1 and currPrice >outE2 and currPrice >basisBB and cci > 0 and macd >0 and plus > minus and k>d and wt1>wt2,close,1)
plot(bvalx, color=color.green, title="Algo Upper Band", linewidth=4,transp=100)

svalx = valuewhen(currPrice < prevPrice and emarat<0 and currPrice <outE1 and currPrice <outE2 and currPrice <basisBB and cci < 0 and macd <0 and plus < minus and k<d and wt1<wt2,close,1)
plot(svalx, color=color.red, title="Algo Lower Band", linewidth=4,transp=100)

avgvalx = ( bvalx + svalx )/2
plot(avgvalx, color=color.black, title="Average Band Price", linewidth=4,transp=100)
avgvalxText=tostring(avgvalx,"###,###.####")

BTPindex = valuewhen(currPrice< avgvalx,close,1)
BTPindexText=tostring(BTPindex,"###,###.####")
STPindex = valuewhen(currPrice> avgvalx,close,1)
STPindexText=tostring(STPindex,"###,###.####")

Dynamo = ((BTPindex + STPindex)/2)

statusx= iff(currPrice>Dynamo,"BUY","SELL")
Dynamo2 = iff(statusx=="BUY",(Dynamo+BTPindex)/2, (Dynamo+STPindex)/2)
DynamoText=tostring(Dynamo2,"###,###.####")
Signalindex = iff(currPrice>Dynamo,BTPindex,STPindex)
plot(BTPindex, color=color.red, title="Buy Signal Price ", linewidth=4,transp=100)
plot(STPindex, color=color.blue, title="Sell Signal Price", linewidth=4,transp=100)
plot(Dynamo2, color=color.black, title="Dynamic Stop Loss", linewidth=4,transp=100)
plot(Signalindex, color=color.black, title="Signal Price", linewidth=4,transp=0)

btp1 = iff(statusx=="BUY",BTPindex * (1+(TP1/100)),na)
//plot(btp1, title="BTP1",style=plot.style_line, linewidth=3, color= color.black)
btp1Text=iff(statusx=="BUY",tostring(btp1,"###,###.####"),"WAIT")
btp2 = iff(statusx=="BUY",BTPindex * (1+(TP2/100)),na)
//plot(btp2, title="BTP2",style=plot.style_line, linewidth=3, color= color.black)
btp2Text=iff(statusx=="BUY",tostring(btp2,"###,###.####"),"WAIT")
btp3 = iff(statusx=="BUY",BTPindex * (1+(TP3/100)),na)
//plot(btp3, title="BTP3",style=plot.style_line, linewidth=3, color= color.black)
btp3Text=iff(statusx=="BUY",tostring(btp3,"###,###.####"),"WAIT")

stp1 = iff(statusx=="SELL",STPindex * (1-(TP1/100)),na)
//plot(stp1, title="STP1",style=plot.style_line, linewidth=3, color= color.black)
stp1Text=iff(statusx=="SELL",tostring(stp1,"###,###.####"),"WAIT")
stp2 = iff(statusx=="SELL",STPindex * (1-(TP2/100)),na)
//plot(stp2, title="STP2",style=plot.style_line, linewidth=3, color= color.black)
stp2Text=iff(statusx=="SELL",tostring(stp2,"###,###.####"),"WAIT")
stp3 = iff(statusx=="SELL",STPindex * (1-(TP3/100)),na)
//plot(stp2, title="STP3",style=plot.style_line, linewidth=3, color= color.black)
stp3Text=iff(statusx=="SELL",tostring(stp3,"###,###.####"),"WAIT")
/////////////OPEN CLOSE OPEN SERIES /////////////////
my_var11 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ Open - Close - Open Series ðŸ’¶ðŸ’¶ðŸ’¶")

// === INPUTS ===
useRes = input(defval=true, title="Use Alternate Resolution?")
intRes = input(defval=3, title="Multiplier for Alernate Resolution")
stratRes = timeframe.ismonthly ? tostring(timeframe.multiplier * intRes, "###M") : 
   timeframe.isweekly ? tostring(timeframe.multiplier * intRes, "###W") : 
   timeframe.isdaily ? tostring(timeframe.multiplier * intRes, "###D") : 
   timeframe.isintraday ? tostring(timeframe.multiplier * intRes, "####") : '60'
basisType = input(defval="SMMA", title="MA Type: ", options=["SMA", "EMA", "DEMA", "TEMA", "WMA", "VWMA", "SMMA", "HullMA", "LSMA", "ALMA", "SSMA", "TMA"])
basisLen = input(defval=8, title="MA Period", minval=1)
offsetSigma = input(defval=6, title="Offset for LSMA / Sigma for ALMA", minval=0)
offsetALMA = input(defval=0.85, title="Offset for ALMA", minval=0, step=0.01)
scolor = input(false, title="Show coloured Bars to indicate Trend?")
delayOffset = input(defval=0, title="Delay Open/Close MA (Forces Non-Repainting)", minval=0, step=1)
tradeType = input("BOTH", title="What trades should be taken : ", options=["LONG", "SHORT", "BOTH", "NONE"])
// === /INPUTS ===

// Constants colours that include fully non-transparent option.
green100 = #008000FF
lime100 = #00FF00FF
red100 = #FF0000FF
blue100 = #0000FFFF
aqua100 = #00FFFFFF
darkred100 = #8B0000FF
gray100 = #808080FF

// === BASE FUNCTIONS ===
// Returns MA input selection variant, default to SMA if blank or typo.
variant(type, src, len, offSig, offALMA) =>
    v1 = sma(src, len)  // Simple
    v2 = ema(src, len)  // Exponential
    v3 = 2 * v2 - ema(v2, len)  // Double Exponential
    v4 = 3 * (v2 - ema(v2, len)) + ema(ema(v2, len), len)  // Triple Exponential
    v5 = wma(src, len)  // Weighted
    v6 = vwma(src, len)  // Volume Weighted
    v7 = 0.0
    sma_1 = sma(src, len)  // Smoothed
    v7 := na(v7[1]) ? sma_1 : (v7[1] * (len - 1) + src) / len
    v8 = wma(2 * wma(src, len / 2) - wma(src, len), round(sqrt(len)))  // Hull
    v9 = linreg(src, len, offSig)  // Least Squares
    v10 = alma(src, len, offALMA, offSig)  // Arnaud Legoux
    v11 = sma(v1, len)  // Triangular (extreme smooth)
    // SuperSmoother filter
    // Â© 2013  John F. Ehlers
    a1 = exp(-1.414 * 3.14159 / len)
    b1 = 2 * a1 * cos(1.414 * 3.14159 / len)
    c2 = b1
    c3 = -a1 * a1
    c1 = 1 - c2 - c3
    v12 = 0.0
    v12 := c1 * (src + nz(src[1])) / 2 + c2 * nz(v12[1]) + c3 * nz(v12[2])
    type == "EMA" ? v2 : type == "DEMA" ? v3 : 
       type == "TEMA" ? v4 : type == "WMA" ? v5 : type == "VWMA" ? v6 : 
       type == "SMMA" ? v7 : type == "HullMA" ? v8 : type == "LSMA" ? v9 : 
       type == "ALMA" ? v10 : type == "TMA" ? v11 : type == "SSMA" ? v12 : v1

// security wrapper for repeat calls
reso(exp, use, res) =>
    security_1 = security(syminfo.tickerid, res, exp, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
    use ? security_1 : exp

// === /BASE FUNCTIONS ===

// === SERIES SETUP ===
closeSeries = variant(basisType, close[delayOffset], basisLen, offsetSigma, offsetALMA)
openSeries = variant(basisType, open[delayOffset], basisLen, offsetSigma, offsetALMA)
// === /SERIES ===

// === PLOTTING ===

// Get Alternate resolution Series if selected.
closeSeriesAlt = reso(closeSeries, useRes, stratRes)
openSeriesAlt = reso(openSeries, useRes, stratRes)
//
trendColour = closeSeriesAlt > openSeriesAlt ? color.green : color.red
bcolour = closeSeries > openSeriesAlt ? lime100 : red100
barcolor(scolor ? bcolour : na, title="Bar Colours")
closeP = plot(closeSeriesAlt, title="Close Series", color=trendColour, linewidth=2, style=plot.style_line, transp=20)
openP = plot(openSeriesAlt, title="Open Series", color=trendColour, linewidth=2, style=plot.style_line, transp=20)
fill(closeP, openP, color=trendColour, transp=80)
// Include bar limiting algorithm
ebar = input(defval=10000, title="Number of Bars for Back Testing", minval=0)

// === /PLOTTING ===
// === ALERT conditions
xlong = crossover(closeSeriesAlt, openSeriesAlt)
xshort = crossunder(closeSeriesAlt, openSeriesAlt)
longCond = xlong  // alternative: longCond[1]? false : (xlong or xlong[1]) and close>closeSeriesAlt and close>=open
shortCond = xshort  // alternative: shortCond[1]? false : (xshort or xshort[1]) and close<closeSeriesAlt and close<=open
// === /ALERT conditions.

//
// Calculate how many mars since last bar
tdays = (timenow - time) / 60000.0  // number of minutes since last bar
tdays := timeframe.ismonthly ? tdays / 1440.0 / 5.0 / 4.3 / timeframe.multiplier : 
   timeframe.isweekly ? tdays / 1440.0 / 5.0 / timeframe.multiplier : 
   timeframe.isdaily ? tdays / 1440.0 / timeframe.multiplier : 
   tdays / timeframe.multiplier  // number of bars since last bar

/////////DEFINING LABELS//////
//xxx = crossover(close , Dynamo)
//yyy = crossunder(close , Dynamo)
plotshape(longCond == true and tradeType != "SHORT", style=shape.diamond,location=location.abovebar, color=color.green, textcolor=color.black, title="Buy Label", size=size.small)
plotshape(shortCond == true and tradeType != "LONG", style=shape.diamond,location=location.belowbar, color=color.red, textcolor=color.black, title="Sell Label", size=size.small)

////////////DEFINING ALERTS/////////
buystop = currPrice> Dynamo and xshort==true
sellstop = currPrice< Dynamo and xlong==true

alertcondition( statusx=="BUY",title='TREND-BUY', message='TREND-BUY ALERT')
alertcondition( buystop==1,title='TREND-BUY TP OR STOP', message='TREND-BUY STOP OR TAKE PROFIT ALERT')
alertcondition( statusx=="SELL", title='TREND-SELL', message='TREND-SELL ALERT')
alertcondition( sellstop==1,title='TREND-SELL TP OR STOP', message='TREND-SELL STOP OR TAKE PROFIT ALERT')

alertcondition( longCond == true and tradeType != "SHORT",title='DIAMOND-BUY ALERT', message='DIAMOND-BUY ALERT')
alertcondition( shortCond == true and tradeType != "LONG", title='DIAMOND-SELL ALERT',message='DIAMOND-SELL ALERT')

/////////////////INFORMATION TABLE/////////
var infoTable = table.new(position = position.top_right, columns = 2, rows = 14, bgcolor = color.white, border_color=color.black, frame_color=color.red , border_width = 1)

if barstate.islast
    table.cell(table_id = infoTable, column = 0, row = 0, text = "ORACLE ALGO ", text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 0, text = "V1.3-By Yasin Basaran" ,text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 1, bgcolor = color.black , text_color=color.white , text = "GENERAL SENSATION" , text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 1, bgcolor = color.yellow , text_color=color.black , text = ""+statusx, text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 2, bgcolor = color.black , text_color=color.white , text = "SUPPORT" , text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 2, bgcolor = color.black , text_color=color.white , text = "RESISTANCE", text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 3, text = ""+lowerText , text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 3, text = ""+upperText, text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 4, bgcolor = color.black , text_color=color.white , text = "KPI ", text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 4, bgcolor = color.black , text_color=color.white , text = "CONTROL", text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 5, text = "CCI :"+cciText,bgcolor=iff(cci >0 , color.green , color.red), text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 5, text = "MACD :"+macdText,bgcolor=iff(hist >0 , color.green , color.red) ,text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 6, text = "DI+ :"+ plusText,bgcolor=iff(plus >minus , color.green , color.red) , text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 6, text = "DI- :"+ minusText, bgcolor=iff(plus >minus , color.green , color.red) ,text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 7, text = "ST-K :"+StochKText,bgcolor=iff(k>d , color.green , color.red), text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 7, text = "ST-D :"+StochDText,bgcolor=iff(k>d , color.green , color.red), text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 8, bgcolor = color.black , text_color=color.white , text = "TREND ", text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 8, bgcolor = color.black , text_color=color.white , text = "CONTROL", text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 9, text = "EMA 50/250 % :"+ emaratText, bgcolor=iff(emarat >0 , color.green , color.red) ,text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 9, text = "RSI :"+rsiText, text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 10, text = "WT :"+ wtratText,bgcolor=iff(wt1>wt2 , color.green , color.red), text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 10, text = "ST :" + superText, text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 11, bgcolor = color.black , text_color=color.white , text = "POWER ", text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 11, bgcolor = color.black , text_color=color.white , text = "CONTROL", text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 12, text = "BULL/BEAR INDEX " , text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 12, text = "VOLUME PRESSURE ", text_size=size.small)

    table.cell(table_id = infoTable, column = 0, row = 13, text = "" + bbindexText, bgcolor= iff(bbindex >0 , color.green , color.red) ,text_size=size.small)
    table.cell(table_id = infoTable, column = 1, row = 13, text = "" + buysellpressureText, bgcolor= iff( buypressure>sellpressure , color.green , color.red) ,text_size=size.small)

/////////////////ORACLE ALGO /////////
var OracleTable = table.new(position = position.bottom_right, columns = 3, rows = 8, bgcolor = color.white, border_color=color.black, frame_color=color.red , border_width = 1)

if barstate.islast
    table.cell(table_id = OracleTable, column = 0, row = 0, text = "ORACLE ALGO ", text_size=size.small)
    table.cell(table_id = OracleTable, column = 1, row = 0, text = "RISK AND PROFIT" ,text_size=size.small)
    table.cell(table_id = OracleTable, column = 2, row = 0, text = "MANAGEMENT" ,text_size=size.small)

    table.cell(table_id = OracleTable, column = 0, row = 1, bgcolor = color.black , text_color=color.white , text = "GENERAL SENSATION" , text_size=size.small)
    table.cell(table_id = OracleTable, column = 1, row = 1, bgcolor = color.yellow , text_color=color.black , text = ""+iff(statusx=="SELL","WAIT",statusx), text_size=size.small)
    table.cell(table_id = OracleTable, column = 2, row = 1, bgcolor = color.yellow , text_color=color.black , text = ""+iff(statusx=="BUY","WAIT",statusx), text_size=size.small)

    table.cell(table_id = OracleTable, column = 0, row = 2, bgcolor = color.black , text_color=color.white , text = "DESCRIPTION" , text_size=size.small)
    table.cell(table_id = OracleTable, column = 1, row = 2, bgcolor = color.black , text_color=color.white , text = "BUY SECTION", text_size=size.small)
    table.cell(table_id = OracleTable, column = 2, row = 2, bgcolor = color.black , text_color=color.white , text = "SELL SECTION", text_size=size.small)

    table.cell(table_id = OracleTable, column = 0, row = 3, bgcolor = color.black , text_color=color.white , text = "SIGNAL PRICE" , text_size=size.small)
    table.cell(table_id = OracleTable, column = 1, row = 3, bgcolor = color.yellow , text_color=color.black , text = ""+iff(statusx=="SELL" or statusx=="WAIT" ,"WAIT",BTPindexText), text_size=size.small)
    table.cell(table_id = OracleTable, column = 2, row = 3, bgcolor = color.yellow , text_color=color.black , text = ""+iff(statusx=="BUY" or statusx=="WAIT","WAIT",STPindexText), text_size=size.small)

    table.cell(table_id = OracleTable, column = 0, row = 4, bgcolor = color.black , text_color=color.white , text = "DYNAMIC-STOP LOSS" , text_size=size.small)
    table.cell(table_id = OracleTable, column = 1, row = 4, bgcolor = color.yellow , text_color=color.black , text = ""+iff(statusx=="SELL","WAIT",DynamoText), text_size=size.small)
    table.cell(table_id = OracleTable, column = 2, row = 4, bgcolor = color.yellow , text_color=color.black , text = ""+iff(statusx=="BUY","WAIT",DynamoText), text_size=size.small)

    table.cell(table_id = OracleTable, column = 0, row = 5, bgcolor = color.black , text_color=color.white , text = "TAKE PROFIT#1" , text_size=size.small)
    table.cell(table_id = OracleTable, column = 1, row = 5, bgcolor = iff(hl2 > btp1 , color.green , color.yellow) , text_color=color.black , text = ""+btp1Text, text_size=size.small)
    table.cell(table_id = OracleTable, column = 2, row = 5, bgcolor = iff(hl2 < stp1 , color.green , color.yellow) , text_color=color.black , text = ""+stp1Text, text_size=size.small)

    table.cell(table_id = OracleTable, column = 0, row = 6, bgcolor = color.black , text_color=color.white , text = "TAKE PROFIT#2" , text_size=size.small)
    table.cell(table_id = OracleTable, column = 1, row = 6, bgcolor = iff(hl2 > btp2 , color.green , color.yellow), text_color=color.black , text = ""+btp2Text, text_size=size.small)
    table.cell(table_id = OracleTable, column = 2, row = 6, bgcolor = iff(hl2 < stp2 , color.green , color.yellow) , text_color=color.black , text = ""+stp2Text, text_size=size.small)

    table.cell(table_id = OracleTable, column = 0, row = 7, bgcolor = color.black , text_color=color.white , text = "TAKE PROFIT#3" , text_size=size.small)
    table.cell(table_id = OracleTable, column = 1, row = 7, bgcolor = iff(hl2 > btp3 , color.green , color.yellow) , text_color=color.black , text = ""+btp3Text, text_size=size.small)
    table.cell(table_id = OracleTable, column = 2, row = 7, bgcolor = iff(hl2 < stp3 , color.green , color.yellow) , text_color=color.black , text = ""+stp3Text, text_size=size.small)


/////////////////TREND SONAR AND BIG BANG/////////
my_var13 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ Trend Sonar and Big Bang % Settings ðŸ’¶ðŸ’¶ðŸ’¶")

Sonar_Period = input(title="Sonar Period",defval=7)
Sonar_src = input(title="Source", type=input.source, defval=close)

emaSmooth = input(title="EMA smoothing",defval=true)
emaLength = input(title="EMA Length",defval=3)
colorBars = input(false,title="Color bars")
highest_change=highest(Sonar_src,Sonar_Period)-highest(Sonar_src,Sonar_Period)[1]
lowest_change=lowest(Sonar_src,Sonar_Period) - lowest(Sonar_src,Sonar_Period)[1]
up_value=highest_change
down_value=lowest_change


var points_array_up = array.new_float(0)
var points_array_down = array.new_float(0)
h=highest(up_value,Sonar_Period)
l=lowest(down_value,Sonar_Period)
if (highest_change>highest_change[1])
    array.push(points_array_up,h)
if (lowest_change<lowest_change[1])
    array.push(points_array_down,l)

plot(0,color=color.orange,transp=55)
if (array.size(points_array_up)>Sonar_Period)
    array.shift(points_array_up)
 
if (array.size(points_array_down)>Sonar_Period)
    array.shift(points_array_down)

sum_total= (array.sum(points_array_up)+array.sum(points_array_down))

Sonar_result=emaSmooth ? ema(sum_total,emaLength) : sum_total

SonarText=tostring(Sonar_result,"#.####")

lengthbigbang = input(7, title ="Big Bang Priod" ,minval=1)
sourcebigbang = input(close, title="Big Bang Source", type = input.source)
bbang= 100 * (sourcebigbang - sourcebigbang[lengthbigbang])/sourcebigbang[lengthbigbang]
bbangText=tostring(bbang,"#.####")

bigbang1d = security(syminfo.tickerid,"D",bbang)
bigbang1dText = tostring(bigbang1d,"#.####")

bigbang4h = security(syminfo.tickerid,"240",bbang)
bigbang4hText = tostring(bigbang4h,"#.####")

bigbang1h = security(syminfo.tickerid,"60",bbang)
bigbang1hText = tostring(bigbang1h,"#.####")

bigbang15m = security(syminfo.tickerid,"15",bbang)
bigbang15mText = tostring(bigbang15m,"#.####")

bigbang5m = security(syminfo.tickerid,"5",bbang)
bigbang5mText = tostring(bigbang5m,"#.####")

sumbbang = bigbang1d - bigbang4h - bigbang1h - bigbang15m - bigbang5m
sumbbangText = tostring(sumbbang,"#.####")

var SonarTable = table.new(position = position.bottom_left, columns = 10, rows = 14, bgcolor = color.white, border_color=color.black, frame_color=color.red , border_width = 1)

if barstate.islast
    table.cell(table_id = SonarTable, column = 0, row = 0, bgcolor = color.black ,text = "TREND SONAR", text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 1, row = 0, bgcolor = color.black ,text = "X7" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 2, row = 0, bgcolor = color.black ,text = "X6" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 3, row = 0, bgcolor = color.black ,text = "X5" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 4, row = 0, bgcolor = color.black ,text = "X4" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 5, row = 0, bgcolor = color.black ,text = "X3" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 6, row = 0, bgcolor = color.black ,text = "X2" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 9, row = 0, bgcolor = color.black ,text = "X1%" ,text_color=color.white, text_size=size.small)

    table.cell(table_id = SonarTable, column = 0, row = 1, bgcolor = color.white ,text = "RTX", text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 1, row = 1, bgcolor = color.white ,text = ""+SonarText[7],text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 2, row = 1, bgcolor = color.white ,text = ""+SonarText[6],text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 3, row = 1, bgcolor = color.white ,text = ""+SonarText[5],text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 4, row = 1, bgcolor = color.white ,text = ""+SonarText[4],text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 5, row = 1, bgcolor = color.white ,text = ""+SonarText[3],text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 6, row = 1, bgcolor = color.white ,text = ""+SonarText[2],text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 9, row = 1, bgcolor = color.white ,text = ""+SonarText[1],text_color=color.black, text_size=size.small)

    table.cell(table_id = SonarTable, column = 0, row = 2, bgcolor = color.black ,text = "BIG BANG", text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 1, row = 2, bgcolor = color.black ,text = "CURRENT T%" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 2, row = 2, bgcolor = color.black ,text = "5 MIN %" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 3, row = 2, bgcolor = color.black ,text = "15 MIN %" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 4, row = 2, bgcolor = color.black ,text = "1 H%" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 5, row = 2, bgcolor = color.black ,text = "4 H%" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 6, row = 2, bgcolor = color.black ,text = "1 D%" ,text_color=color.white, text_size=size.small)
    table.cell(table_id = SonarTable, column = 9, row = 2, bgcolor = color.black ,text = "BIG BANG%" ,text_color=color.white, text_size=size.small)

    table.cell(table_id = SonarTable, column = 0, row = 3, bgcolor = color.white ,text = "BIG BANG%", text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 1, row = 3, bgcolor = color.white ,text = ""+bbangText,text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 2, row = 3, bgcolor = color.white ,text = ""+bigbang5mText,text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 3, row = 3, bgcolor = color.white ,text = ""+bigbang15mText ,text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 4, row = 3, bgcolor = color.white ,text = ""+bigbang1hText ,text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 5, row = 3, bgcolor = color.white ,text = ""+bigbang4hText,text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 6, row = 3, bgcolor = color.white ,text = ""+bigbang1dText,text_color=color.black, text_size=size.small)
    table.cell(table_id = SonarTable, column = 9, row = 3, bgcolor = iff(sumbbang>0,color.green,color.red) ,text = ""+sumbbangText,text_color=color.black, text_size=size.small)

////SESSIONS////
my_var10 = input(true, title=" ðŸ’¶ðŸ’¶ðŸ’¶ NY,Asia and London Market Working Hours Settings ðŸ’¶ðŸ’¶ðŸ’¶")

timeinrange(res, sess) =>
    time(res, sess) != 0

//Change true to false = You have to turn on, won't show up by default
//****Always use lowercase letters

Open = input(defval=false, type=input.bool, title="Open On")
Session = input(defval=false, type=input.bool, title="Session On")
Close = input(defval=false, type=input.bool, title="Close On")

nySessionStart = color.white
nySession = color.white
nySessionEnd = color.white
asiaSessionStart = #DAA520
asiaSession = #DAA520
asiaSessionEnd = #DAA520
europeSessionStart = #1E90FF
europeSession = #1E90FF
europeSessionEnd = #1E90FF


bgcolor(Open and timeinrange(timeframe.period, "0800-0810") ? nySessionStart : na, transp=20)
bgcolor(Session and timeinrange(timeframe.period, "0800-1700") ? nySession : na, transp=75)
bgcolor(Close and timeinrange(timeframe.period, "1650-1700") ? nySessionEnd : na, transp=20)

bgcolor(Open and timeinrange(timeframe.period, "1900-1910") ? asiaSessionStart : na, transp=20)
bgcolor(Session and timeinrange(timeframe.period, "1900-0400") ? asiaSession : na, transp=75)
bgcolor(Close and timeinrange(timeframe.period, "0350-0400") ? asiaSessionEnd : na, transp=20)

bgcolor(Open and timeinrange(timeframe.period, "0300-0310") ? europeSessionStart : na, transp=20)
bgcolor(Session and timeinrange(timeframe.period, "0300-1200") ? europeSession : na, transp=75)
bgcolor(Close and timeinrange(timeframe.period, "1150-1200") ? europeSessionEnd : na, transp=20)